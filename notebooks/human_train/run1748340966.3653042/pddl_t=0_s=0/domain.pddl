(define (domain generated)
  (:requirements :strips :typing)
  (:types door region physical robot - object)
  (:predicates
    (is_ego ?robot0 - robot)
    (holding ?robot0 - robot ?physical0 - physical)
    (stable ?physical0 - physical ?region0 - region)
    (in_rob ?robot0 - robot ?region0 - region)
    (in_obj ?physical0 - physical ?region0 - region)
    (open ?door0 - door)
    (transit_action ?robot0 - robot ?region0 - region)
    (transfer_action ?robot0 - robot ?physical0 - physical ?region0 - region)
    (pick_action ?robot0 - robot ?physical0 - physical)
    (place_action ?robot0 - robot ?physical0 - physical)
    (open_action ?robot0 - robot)
    (close_action ?robot0 - robot)
    (nothing_action ?robot0 - robot)
    (eq ?o1 - object ?o2 - object)
    (goal )
  )
  (:action pick_other*transit_ego_cm_0.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_0.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action pick_other*transit_ego_cm_1.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_0.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*open_ego_cm_1.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_0.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action pick_other*close_ego_cm_1.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_0.2
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_0.3
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_0.4
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_0.5
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_0.6
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_0.7
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_0.8
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_1.2
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_1.3
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_1.4
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_1.5
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_1.6
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_1.7
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action pick_other*nothing_ego_cm_1.8
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (pick_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (in_obj ?obj2 ?reg3) (in_rob ?rob2 ?reg3) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_0.0
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (holding ?rob2 ?obj1)) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_0.1
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (holding ?rob2 ?obj1) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_0.2
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (not (holding ?rob2 ?obj1)) (in_obj ?obj1 ?reg1)) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_1.0
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (holding ?rob2 ?obj1)) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_1.1
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (holding ?rob2 ?obj1) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_1.2
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (not (holding ?rob2 ?obj1)) (in_obj ?obj1 ?reg1)) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_2.0
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (holding ?rob2 ?obj1)) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_2.1
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (holding ?rob2 ?obj1) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_2.2
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (not (holding ?rob2 ?obj1)) (in_obj ?obj1 ?reg1)) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_3.0
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (holding ?rob2 ?obj1)) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_3.1
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (holding ?rob2 ?obj1) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_3.2
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (not (holding ?rob2 ?obj1)) (in_obj ?obj1 ?reg1)) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_4.0
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (holding ?rob2 ?obj1)) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_4.1
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (holding ?rob2 ?obj1) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_4.2
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (not (holding ?rob2 ?obj1)) (in_obj ?obj1 ?reg1)) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_5.0
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (holding ?rob2 ?obj1)) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_5.1
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (holding ?rob2 ?obj1) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_5.2
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (not (holding ?rob2 ?obj1)) (in_obj ?obj1 ?reg1)) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_6.0
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (holding ?rob2 ?obj1)) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_6.1
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (holding ?rob2 ?obj1) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_6.2
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (not (holding ?rob2 ?obj1)) (in_obj ?obj1 ?reg1)) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_7.0
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (holding ?rob2 ?obj1)) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_7.1
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (holding ?rob2 ?obj1) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_7.2
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (not (holding ?rob2 ?obj1)) (in_obj ?obj1 ?reg1)) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_8.0
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (holding ?rob2 ?obj1)) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_8.1
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (holding ?rob2 ?obj1) (not (in_obj ?obj1 ?reg1))) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*pick_ego_cm_8.2
    :parameters (?rob2 - robot ?obj1 - physical ?reg1 - region ?rob1 - robot)
    :precondition (and (place_action ?rob2 ?obj1) (is_ego ?rob1) (not (is_ego ?rob2)) (holding ?rob2 ?obj1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (in_rob ?rob2 ?reg1) (stable ?obj1 ?reg1) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (not (holding ?rob2 ?obj1)) (in_obj ?obj1 ?reg1)) (not (place_action ?rob2 ?obj1)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_0.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action place_other*transit_ego_cm_1.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_0.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*open_ego_cm_1.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_0.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.2.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.2.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.3.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.3.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.4.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.4.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.5.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.5.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.6.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.6.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.7.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.7.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.8.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action place_other*close_ego_cm_1.8.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_0.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_0.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_0.2
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_0.3
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_0.4
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_0.5
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_0.6
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_0.7
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_0.8
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (holding ?rob2 ?obj2) (not (in_obj ?obj2 ?reg3))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_1.0
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_1.1
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_1.2
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_1.3
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_1.4
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_1.5
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_1.6
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_1.7
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action place_other*nothing_ego_cm_1.8
    :parameters (?rob2 - robot ?obj2 - physical ?reg3 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (place_action ?rob2 ?obj2) (or (not (in_rob ?rob2 region_mug)) (and (in_rob ?rob2 region_mug) (open door))) (not (in_obj ?obj2 ?reg3)) (in_rob ?rob2 ?reg3) (holding ?rob2 ?obj2) (stable ?obj2 ?reg3) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (holding ?rob2 ?obj2)) (in_obj ?obj2 ?reg3)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_0.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_1.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*pick_ego_cm_2.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_0.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_1.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action transit_other*place_ego_cm_2.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_0.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_1.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transit_ego_cm_2.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_0.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_1.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transit_other*transfer_ego_cm_2.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_0.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_1.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*open_ego_cm_2.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_0.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_1.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.5.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.5.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.6.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transit_other*close_ego_cm_2.6.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_0.2
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_0.3
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_0.4
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_0.5
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_0.6
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_1.2
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_1.3
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_1.4
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_1.5
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_1.6
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_2.2
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_2.3
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (pick_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_2.4
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_2.5
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transit_other*nothing_ego_cm_2.6
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transit_action ?rob2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (pick_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_0.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_0.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_0.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_0.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_0.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_0.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_0.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_0.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_0.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_0.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_1.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_1.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_1.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_1.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_1.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_1.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_1.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_1.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_1.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_1.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_2.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_2.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_2.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_2.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_2.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_2.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_2.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_2.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_2.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action transfer_other*transit_ego_cm_2.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_0.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_0.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_0.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_0.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_0.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_0.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_0.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_0.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_0.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_0.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_1.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_1.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_1.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_1.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_1.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_1.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_1.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_1.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_1.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_1.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_2.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_2.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_2.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_2.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_2.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_2.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_2.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_2.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_2.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*open_ego_cm_2.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_0.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_0.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_0.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_0.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_0.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_0.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_0.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_0.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_0.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_0.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_1.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_1.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_1.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_1.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_1.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_1.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_1.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_1.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_1.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_1.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_2.0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_2.0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_2.1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_2.1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_2.2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_2.2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_2.3.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_2.3.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_2.4.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action transfer_other*close_ego_cm_2.4.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_0.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_0.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_0.2
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_0.3
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_0.4
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (in_rob ?rob2 region_mug) (not (in_rob ?rob2 region_door)) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_1.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_1.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_1.2
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_1.3
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_1.4
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (in_rob ?rob2 region_door) (not (in_rob ?rob2 region_stable_mug))) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_2.0
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_2.1
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_2.2
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (place_action robot_2 mug)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_2.3
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (place_action robot_2 mug) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action transfer_other*nothing_ego_cm_2.4
    :parameters (?rob2 - robot ?reg3 - region ?reg4 - region ?obj2 - physical ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (transfer_action ?rob2 ?obj2 ?reg4) (in_rob ?rob2 ?reg3) (not (in_rob ?rob2 ?reg4)) (holding ?rob2 ?obj2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (in_rob ?rob2 region_mug)) (not (in_rob ?rob2 region_door)) (in_rob ?rob2 region_stable_mug)) (and (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (place_action robot_2 mug)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_0.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*pick_ego_cm_1.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_0.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action open_other*place_ego_cm_1.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_0.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transit_ego_cm_1.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_0.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action open_other*transfer_ego_cm_1.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_0.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_0.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_1.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_1.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_2.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_2.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_3.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_3.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_4.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_4.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_5.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action open_other*close_ego_cm_5.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_0.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_0.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_0.2
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_0.3
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_0.4
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_0.5
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_1.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_1.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_1.2
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_1.3
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_1.4
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action open_other*nothing_ego_cm_1.5
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (open_action ?rob2) (not (open door)) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_0.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*pick_ego_cm_1.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (in_obj ?obj1 region_mug)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (in_rob ?rob1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_0.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action close_other*place_ego_cm_1.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (holding ?rob1 ?obj1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 region_mug)) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_0.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transit_ego_cm_1.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_0.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.0.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.0.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.1.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.1.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.2.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.2.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.3.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.3.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.4.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.4.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.5.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action close_other*transfer_ego_cm_1.5.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_0.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_0.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_1.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_1.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_2.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_2.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_3.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_3.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_4.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_4.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_5.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action close_other*open_ego_cm_5.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_0.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_0.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_0.2
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_0.3
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_0.4
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_0.5
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (open door) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_1.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_1.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_1.2
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_1.3
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_1.4
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action close_other*nothing_ego_cm_1.5
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (close_action ?rob2) (open door) (in_rob ?rob2 region_door) (not (exists (?obj - physical) (holding ?rob2 ?obj))) (is_ego ?rob1) (not (goal)))
    :effect (and (not (open door)) (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_0.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_0.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_1.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_1.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_2.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_2.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_3.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_3.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_4.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_4.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_5.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_5.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_6.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_6.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_7.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_7.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_8.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_8.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_9.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_9.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_10.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*pick_ego_cm_10.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_obj ?obj1 ?reg1) (in_rob ?rob1 ?reg1) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_0.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_0.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_1.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_1.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_2.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_2.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_3.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_3.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_4.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_4.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_5.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_5.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_6.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_6.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_7.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_7.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_8.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_8.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_9.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_9.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_10.0
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (holding ?rob1 ?obj1) (not (in_obj ?obj1 ?reg1))) (increase (total-cost) 14))
  )
  (:action nothing_other*place_ego_cm_10.1
    :parameters (?rob2 - robot ?rob1 - robot ?obj1 - physical ?reg1 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (or (not (in_rob ?rob1 region_mug)) (and (in_rob ?rob1 region_mug) (open door))) (in_rob ?rob1 ?reg1) (holding ?rob1 ?obj1) (stable ?obj1 ?reg1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (holding ?rob1 ?obj1)) (in_obj ?obj1 ?reg1)) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_0.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_0.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_1.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_1.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_2.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_2.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_3.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_3.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_4.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_4.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_5.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_5.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_6.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_6.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_7.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_7.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_8.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_8.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_9.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_9.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_10.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transit_ego_cm_10.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_0.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_0.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_1.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_1.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_2.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_2.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_3.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_3.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_4.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_4.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_5.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_5.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_6.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_6.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_7.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_7.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_8.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_8.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_9.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_9.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_10.0
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2))) (increase (total-cost) 14))
  )
  (:action nothing_other*transfer_ego_cm_10.1
    :parameters (?rob2 - robot ?rob1 - robot ?reg1 - region ?reg2 - region ?obj1 - physical)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (in_rob ?rob1 ?reg1) (not (in_rob ?rob1 ?reg2)) (holding ?rob1 ?obj1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (and (not (in_rob ?rob1 ?reg1)) (in_rob ?rob1 ?reg2)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_0.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_0.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_1.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_1.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_2.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_2.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_3.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_3.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_4.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_4.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_5.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_5.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_6.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_6.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_7.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_7.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_8.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_8.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_9.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_9.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_10.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*open_ego_cm_10.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (open door)) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_0.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_0.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_1.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_1.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_2.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_2.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_3.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_3.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_4.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_4.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_5.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_5.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_6.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_6.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_7.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_7.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_8.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_8.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_9.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_9.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_10.0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (open door) (increase (total-cost) 14))
  )
  (:action nothing_other*close_ego_cm_10.1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (open door) (in_rob ?rob1 region_door) (not (exists (?obj - physical) (holding ?rob1 ?obj))) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (not (open door)) (increase (total-cost) 14))
  )
  (:action nothing_other*nothing_ego_cm_0
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (transit_action robot_2 region_mug) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action nothing_other*nothing_ego_cm_1
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (transit_action robot_2 region_door) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action nothing_other*nothing_ego_cm_2
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (transit_action robot_2 region_stable_mug) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action nothing_other*nothing_ego_cm_3
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (transfer_action robot_2 mug region_mug) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action nothing_other*nothing_ego_cm_4
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (transfer_action robot_2 mug region_door) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action nothing_other*nothing_ego_cm_5
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (transfer_action robot_2 mug region_stable_mug) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action nothing_other*nothing_ego_cm_6
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (pick_action robot_2 mug) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action nothing_other*nothing_ego_cm_7
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (place_action robot_2 mug) (not (open_action robot_2)) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action nothing_other*nothing_ego_cm_8
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (open_action robot_2) (not (close_action robot_2)) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action nothing_other*nothing_ego_cm_9
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (close_action robot_2) (not (nothing_action robot_2))) (increase (total-cost) 14))
  )
  (:action nothing_other*nothing_ego_cm_10
    :parameters (?rob2 - robot ?rob1 - robot)
    :precondition (and (not (is_ego ?rob2)) (nothing_action ?rob2) (is_ego ?rob1) (not (goal)))
    :effect (and (and (not (transit_action robot_2 region_mug)) (not (transit_action robot_2 region_door)) (not (transit_action robot_2 region_stable_mug)) (not (transfer_action robot_2 mug region_mug)) (not (transfer_action robot_2 mug region_door)) (not (transfer_action robot_2 mug region_stable_mug)) (not (pick_action robot_2 mug)) (not (place_action robot_2 mug)) (not (open_action robot_2)) (not (close_action robot_2)) (nothing_action robot_2)) (increase (total-cost) 14))
  )
  (:derived (goal)
     (and (and (exists (?rob - robot) (holding ?rob mug)) (not (open door))))
  )
)